-- CISC/CMPE 422/835
-- SMV model of '1st attempt' in course notes
-- . Asynchronous, fair model assuming finite non-critical section
-- . Access to critical section granted using a variable 'turn' that gets
--   updated in a 'round robin' fashion
-- . Satisfies mutual exclusion and eventual entry
-- . Works fine, but is based on assumption that non-critical section 
--   is always terminating
-- . Parameter 'id' used by value, parameter 'turn' used by reference
MODULE P(id, turn)
VAR
  pc : {en, nc, cr, ex};
ASSIGN
  init(pc) := nc;
  next(pc) := 
    case
--      pc=nc : en;              
      pc=nc : {nc,en};              
      pc=en & turn=id : cr;   -- get into critical section 
      pc=cr : ex;             -- get out of critical section right away
      pc=ex : nc;
      TRUE : pc;              -- don't change value of 'pc' 
    esac;
  next(turn) := 
    case
      pc=ex : (turn+1) mod 2;
      TRUE : turn;
    esac;
FAIRNESS running

MODULE main
VAR
  p0 : process P(0, turn);
  p1 : process P(1, turn);
  turn : 0..1;
  

  
-- safety: mutual exclusion
SPEC NAME 
  mutex := AG !(p0.pc=cr & p1.pc=cr)  -- holds








    
-- liveness/progress: eventual entry for p0
SPEC NAME
  ee4p0 := AG (p0.pc=en -> AF p0.pc=cr)  -- holds, if 'nc' of p1 always terminates

-- liveness/progress: eventual entry for p1
SPEC NAME
  ee4p1 := AG (p1.pc=en -> AF p1.pc=cr)  -- holds, if 'nc' of p1 always terminates

-- liveness/progress: p0 in critical section infintely often
SPEC NAME
  p0inf := AG AF p0.pc=cr  -- holds, if 'nc' of p1 always terminates

-- liveness/progreess: p1 in critical section infintely often
SPEC NAME
  p1inf := AG AF p1.pc=cr  -- holds

